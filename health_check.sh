#!/bin/bash
# health_check.sh - Automated system health check for Red project
# This script updates documentation and generates AI context summary

# Timestamp for all operations
TIMESTAMP=$(date)
LOGS_DIR="/logs"
WORKSPACE_DIR="/workspace"
DOCS_FILE="$WORKSPACE_DIR/docs_vast-ai-environment.md"
CONTEXT_FILE="$WORKSPACE_DIR/red_ai_context.md"

# Create status file with timestamp
echo "# Red Project System Status - $TIMESTAMP" > $CONTEXT_FILE
echo "## AI Context Information" >> $CONTEXT_FILE
echo "This file is automatically generated by health_check.sh for AI assistant context." >> $CONTEXT_FILE

# Basic system information
echo "## System Configuration" >> $CONTEXT_FILE
echo "\`\`\`" >> $CONTEXT_FILE
echo "CUDA Version: $(nvcc --version | grep "release" | awk '{print $6}')" >> $CONTEXT_FILE
echo "Python Version: $(python --version)" >> $CONTEXT_FILE
echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d= -f2 | tr -d \")" >> $CONTEXT_FILE
echo "\`\`\`" >> $CONTEXT_FILE

# Update the AI Context section in docs
echo "Updating AI Context section in documentation..."
sed -i "/### Current System Configuration/,/### Current On-Start Script/c\\
### Current System Configuration\\
- **Last Updated**: $TIMESTAMP\\
- **Base Image**: remphan/visomasterdockah:latest\\
- **Vast.ai Command**: \\
\`\`\`\\
vastai create instance <OFFER_ID> --image remphan/visomasterdockah:latest --env '-p 1111:1111 -p 6006:6006 -p 8080:8080 -p 8384:8384 -p 72299:72299 -p 5901:5901 -p 6901:6901 -p 8585:8585 -p 22:22 -p 8888:8888 -e OPEN_BUTTON_PORT=1111 -e OPEN_BUTTON_TOKEN=1 -e PORTAL_CONFIG=\"localhost:1111:11111:/:Instance Portal|localhost:8080:18080:/:Jupyter|localhost:8080:8080:/terminals/1:Jupyter Terminal|localhost:8384:18384:/:Syncthing|localhost:6006:16006:/:Tensorboard\" -e JUPYTER_DIR=/ -e PROVISIONING_SCRIPT=https://raw.githubusercontent.com/remphan1618/Red/main/vast_ai_provisioning_script.sh VNC_PASSWORDLESS=true JUPYTER_DIR=/'\\
\`\`\`\\
\\
### Current On-Start Script\\
\`\`\`bash\\
#!/bin/bash\\
if [ -n \"\$PROVISIONING_SCRIPT\" ]; then\\
  curl -s -o /tmp/prov.sh \"\$PROVISIONING_SCRIPT\" || wget -q -O /tmp/prov.sh \"\$PROVISIONING_SCRIPT\"\\
  chmod +x /tmp/prov.sh && bash /tmp/prov.sh\\
fi\\
for s in /vast_ai_provisioning_script.sh /src/provisioning_script.sh /root/provisioning_script.sh; do\\
  if [ -f \"\$s\" ]; then echo \"Running: \$s\"; bash \"\$s\"; fi\\
done\\
\`\`\`" "$DOCS_FILE"

# Update the provisioning scripts status
echo "Checking provisioning scripts status..."
STATUS_VAST=""
STATUS_SRC=""
STATUS_ROOT=""

# Check script presence and log file for each provisioning script
if [ -f "/vast_ai_provisioning_script.sh" ]; then 
  # Look for a log entry indicating this script ran
  if [ -f "/logs/vast_ai_provisioning.log" ]; then
    LAST_RUN=$(tail -n 1 /logs/vast_ai_provisioning.log | grep -o "completed" || echo "No completion record")
    STATUS_VAST="Present ($(wc -l /vast_ai_provisioning_script.sh | awk '{print $1}') lines) - Last run status: $LAST_RUN"
  else
    STATUS_VAST="Present ($(wc -l /vast_ai_provisioning_script.sh | awk '{print $1}') lines) - No run log found"
  fi
else 
  STATUS_VAST="Not found"
fi

if [ -f "/src/provisioning_script.sh" ]; then 
  if [ -f "/logs/src_provisioning.log" ]; then
    LAST_RUN=$(tail -n 1 /logs/src_provisioning.log | grep -o "completed" || echo "No completion record")
    STATUS_SRC="Present ($(wc -l /src/provisioning_script.sh | awk '{print $1}') lines) - Last run status: $LAST_RUN"
  else
    STATUS_SRC="Present ($(wc -l /src/provisioning_script.sh | awk '{print $1}') lines) - No run log found"
  fi
else 
  STATUS_SRC="Not found"
fi

if [ -f "/root/provisioning_script.sh" ]; then 
  if [ -f "/logs/root_provisioning.log" ]; then
    LAST_RUN=$(tail -n 1 /logs/root_provisioning.log | grep -o "completed" || echo "No completion record")
    STATUS_ROOT="Present ($(wc -l /root/provisioning_script.sh | awk '{print $1}') lines) - Last run status: $LAST_RUN"
  else
    STATUS_ROOT="Present ($(wc -l /root/provisioning_script.sh | awk '{print $1}') lines) - No run log found"
  fi
else 
  STATUS_ROOT="Not found"
fi

sed -i "/### Provisioning Scripts Status/,/### Service Status Overview/c\\
### Provisioning Scripts Status\\
- **/vast_ai_provisioning_script.sh**: $STATUS_VAST\\
- **/src/provisioning_script.sh**: $STATUS_SRC\\
- **/root/provisioning_script.sh**: $STATUS_ROOT\\
\\
### Service Status Overview\\
\`\`\`\\
$(supervisorctl status 2>/dev/null || echo "supervisorctl not available")\\
\`\`\`" "$DOCS_FILE"

# Copy the updated AI context to the shareable file
echo "Copying AI context to shareable file..."
sed -n '/## AI Assistant Context Section/,/---/p' "$DOCS_FILE" >> $CONTEXT_FILE

# Add service status
echo "## Current System Status" >> $CONTEXT_FILE
echo "### Running Services" >> $CONTEXT_FILE
echo "\`\`\`" >> $CONTEXT_FILE
supervisorctl status 2>/dev/null || echo "supervisorctl not available" >> $CONTEXT_FILE
echo "\`\`\`" >> $CONTEXT_FILE

# Add recent logs summary
echo "### Recent Log Summary" >> $CONTEXT_FILE
echo "\`\`\`" >> $CONTEXT_FILE
find $LOGS_DIR -type f -name "*.log" -exec sh -c 'echo "=== $1 ==="; tail -n 10 "$1"' _ {} \; 2>/dev/null || echo "No logs found" >> $CONTEXT_FILE
echo "\`\`\`" >> $CONTEXT_FILE

# Check VisoMaster installation
echo "### VisoMaster Status" >> $CONTEXT_FILE
if [ -d "/VisoMaster" ]; then
  echo "- Repository: Present at /VisoMaster" >> $CONTEXT_FILE
  echo "- Files present:" >> $CONTEXT_FILE
  ls -la /VisoMaster | grep -v "^d" | grep -v "total" | awk '{print "  - " $9}' | head -n 10 >> $CONTEXT_FILE
  if [ -f "/VisoMaster/requirements.txt" ]; then
    echo "- Requirements: Present at /VisoMaster/requirements.txt" >> $CONTEXT_FILE
  else
    echo "- Requirements: Not found" >> $CONTEXT_FILE
  fi
  if [ -d "/VisoMaster/models" ]; then
    echo "- Models directory: Present with $(ls -A /VisoMaster/models | wc -l) files" >> $CONTEXT_FILE
  else
    echo "- Models directory: Not found" >> $CONTEXT_FILE
  fi
else
  echo "- Repository: Not found" >> $CONTEXT_FILE
fi

# Check VNC setup
echo "### VNC Configuration" >> $CONTEXT_FILE
if [ -f "/dockerstartup/vnc_startup.sh" ]; then
  echo "- VNC Startup: Present at /dockerstartup/vnc_startup.sh" >> $CONTEXT_FILE
  echo "- VNC Type: $(grep -q 'filebrowser' /dockerstartup/vnc_startup.sh && echo 'Filebrowser version' || echo 'Standard version')" >> $CONTEXT_FILE
else
  echo "- VNC Startup: Not found" >> $CONTEXT_FILE
fi

echo "### Window Manager Status" >> $CONTEXT_FILE
if [ -f "/logs/wm_startup.log" ]; then
  echo "\`\`\`" >> $CONTEXT_FILE
  tail -n 10 /logs/wm_startup.log >> $CONTEXT_FILE
  echo "\`\`\`" >> $CONTEXT_FILE
else
  echo "- Window Manager log not found" >> $CONTEXT_FILE
fi

# Add final timestamp
echo "---" >> $CONTEXT_FILE
echo "Generated on: $TIMESTAMP" >> $CONTEXT_FILE
echo "File can be provided to AI assistants for context" >> $CONTEXT_FILE

# Update timestamp in documentation
sed -i "s/\*Last updated:.*\*/\*Last updated: $TIMESTAMP\*/" "$DOCS_FILE"

# Create a Jupyter notebook to view the context and run scripts
cat > "$WORKSPACE_DIR/view_ai_context.ipynb" << 'EOL'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Red Project AI Context Viewer & Script Manager\n",
    "\n",
    "This notebook displays the AI context information for easy viewing and copying. It also allows you to make the health check script executable and run it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make the health check script executable\n",
    "!chmod +x /workspace/health_check.sh\n",
    "print(\"✅ Made health_check.sh executable\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run the health check script to update the context\n",
    "!bash /workspace/health_check.sh\n",
    "print(\"✅ Health check completed\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## AI Context Display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Display the AI context file\n",
    "with open('/workspace/red_ai_context.md', 'r') as f:\n",
    "    content = f.read()\n",
    "    \n",
    "from IPython.display import Markdown\n",
    "display(Markdown(content))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Provisioning Script Logging\n",
    "\n",
    "This section creates modified provisioning scripts that log to separate files so we can track when each script runs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create wrapper for vast_ai_provisioning_script.sh\n",
    "if os.path.exists(\"/vast_ai_provisioning_script.sh\"):\n",
    "    with open(\"/vast_ai_provisioning_script_wrapper.sh\", \"w\") as f:\n",
    "        f.write(\"\"\"#!/bin/bash\n",
    "mkdir -p /logs\n",
    "echo \\\"Starting vast_ai_provisioning_script.sh at $(date)\\\" > /logs/vast_ai_provisioning.log\n",
    "bash /vast_ai_provisioning_script.sh 2>&1 | tee -a /logs/vast_ai_provisioning.log\n",
    "echo \\\"vast_ai_provisioning_script.sh completed at $(date)\\\" >> /logs/vast_ai_provisioning.log\n",
    "\"\"\")\n",
    "    !chmod +x /vast_ai_provisioning_script_wrapper.sh\n",
    "    print(\"✅ Created wrapper for /vast_ai_provisioning_script.sh\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create wrapper for src/provisioning_script.sh\n",
    "if os.path.exists(\"/src/provisioning_script.sh\"):\n",
    "    with open(\"/src/provisioning_script_wrapper.sh\", \"w\") as f:\n",
    "        f.write(\"\"\"#!/bin/bash\n",
    "mkdir -p /logs\n",
    "echo \\\"Starting src/provisioning_script.sh at $(date)\\\" > /logs/src_provisioning.log\n",
    "bash /src/provisioning_script.sh 2>&1 | tee -a /logs/src_provisioning.log\n",
    "echo \\\"src/provisioning_script.sh completed at $(date)\\\" >> /logs/src_provisioning.log\n",
    "\"\"\")\n",
    "    !chmod +x /src/provisioning_script_wrapper.sh\n",
    "    print(\"✅ Created wrapper for /src/provisioning_script.sh\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create wrapper for root/provisioning_script.sh\n",
    "if os.path.exists(\"/root/provisioning_script.sh\"):\n",
    "    with open(\"/root/provisioning_script_wrapper.sh\", \"w\") as f:\n",
    "        f.write(\"\"\"#!/bin/bash\n",
    "mkdir -p /logs\n",
    "echo \\\"Starting root/provisioning_script.sh at $(date)\\\" > /logs/root_provisioning.log\n",
    "bash /root/provisioning_script.sh 2>&1 | tee -a /logs/root_provisioning.log\n",
    "echo \\\"root/provisioning_script.sh completed at $(date)\\\" >> /logs/root_provisioning.log\n",
    "\"\"\")\n",
    "    !chmod +x /root/provisioning_script_wrapper.sh\n",
    "    print(\"✅ Created wrapper for /root/provisioning_script.sh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## On-Start Script Creator\n",
    "\n",
    "This cell creates a file with the fixed on-start script that you can copy to the Vast.ai interface"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the fixed on-start script file\n",
    "with open(\"/workspace/fixed_onstart_script.sh\", \"w\") as f:\n",
    "    f.write(\"\"\"#!/bin/bash\n",
    "if [ -n \"$PROVISIONING_SCRIPT\" ]; then\n",
    "  curl -s -o /tmp/prov.sh \"$PROVISIONING_SCRIPT\" || wget -q -O /tmp/prov.sh \"$PROVISIONING_SCRIPT\"\n",
    "  chmod +x /tmp/prov.sh && bash /tmp/prov.sh\n",
    "fi\n",
    "for s in /vast_ai_provisioning_script.sh /src/provisioning_script.sh /root/provisioning_script.sh; do\n",
    "  if [ -f \"$s\" ]; then echo \"Running: $s\"; bash \"$s\"; fi\n",
    "done\n",
    "\"\"\")\n",
    "\n",
    "# Display the script content for easy copying\n",
    "print(\"Fixed On-Start Script (copy this to Vast.ai):\")\n",
    "print(\"\")\n",
    "with open(\"/workspace/fixed_onstart_script.sh\", \"r\") as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# View the raw content of red_ai_context.md (for copying)\n",
    "with open('/workspace/red_ai_context.md', 'r') as f:\n",
    "    content = f.read()\n",
    "    \n",
    "print(content)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOL

# Create a wrapper script for the updated on-start script
cat > "$WORKSPACE_DIR/improved_onstart.sh" << 'EOL'
#!/bin/bash
# Improved on-start script with separate logging for each provisioning script

echo "Starting improved on-start script at $(date)" > /logs/onstart.log

# Run the provisioning script from environment variable if specified
if [ -n "$PROVISIONING_SCRIPT" ]; then
  echo "Using PROVISIONING_SCRIPT: $PROVISIONING_SCRIPT" | tee -a /logs/onstart.log
  curl -s -o /tmp/prov.sh "$PROVISIONING_SCRIPT" || wget -q -O /tmp/prov.sh "$PROVISIONING_SCRIPT"
  chmod +x /tmp/prov.sh
  echo "Starting PROVISIONING_SCRIPT at $(date)" > /logs/env_provisioning.log
  bash /tmp/prov.sh 2>&1 | tee -a /logs/env_provisioning.log
  echo "PROVISIONING_SCRIPT completed at $(date)" >> /logs/env_provisioning.log
fi

# Run each local provisioning script with separate logging
for script_path in /vast_ai_provisioning_script.sh /src/provisioning_script.sh /root/provisioning_script.sh; do
  if [ -f "$script_path" ]; then
    script_name=$(basename "$script_path" .sh)
    log_file="/logs/${script_name}.log"
    
    echo "Running: $script_path with log at $log_file" | tee -a /logs/onstart.log
    echo "Starting $script_path at $(date)" > "$log_file"
    bash "$script_path" 2>&1 | tee -a "$log_file"
    echo "$script_path completed at $(date)" >> "$log_file"
  fi
done

echo "Completed on-start script at $(date)" >> /logs/onstart.log
EOL

chmod +x "$WORKSPACE_DIR/improved_onstart.sh"
chmod +x "$WORKSPACE_DIR/health_check.sh"

# Set up cron job to run health check every 6 hours (if not already set)
if ! crontab -l 2>/dev/null | grep -q health_check.sh; then
  (crontab -l 2>/dev/null; echo "0 */6 * * * /bin/bash $WORKSPACE_DIR/health_check.sh") | crontab -
  echo "Cron job added to run health check every 6 hours"
fi

echo "Health check completed at $TIMESTAMP"
echo "AI context file generated at $CONTEXT_FILE"
echo "You can view this context using the Jupyter notebook at $WORKSPACE_DIR/view_ai_context.ipynb"