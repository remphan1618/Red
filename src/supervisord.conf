# /src/supervisord.conf
# Configuration file for Supervisor process manager
# Uses /VisoMaster for Jupyter directory and /logs for logs

[supervisord]
nodaemon=true       ; Run supervisor in the foreground (required for Docker)
user=root           ; Run supervisor itself as root
# *** Using /logs ***
logfile=/logs/supervisord.log ; Log supervisor messages itself
logfile_maxbytes=10MB
logfile_backups=3
pidfile=/tmp/supervisord.pid ; Default pid file location

[program:sshd]
command=/usr/sbin/sshd -D ; Run the SSH daemon in the foreground
autostart=true            ; Start sshd automatically when supervisor starts
autorestart=true          ; Restart sshd if it crashes
priority=10               ; Lower priority means start earlier
# *** Using /logs ***
stdout_logfile=/logs/sshd.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
# *** Using /logs ***
stderr_logfile=/logs/sshd_err.log
stderr_logfile_maxbytes=10MB
stderr_logfile_backups=3

[program:jupyter]
# Run jupyter lab, listening on all interfaces (0.0.0.0), NO AUTHENTICATION (token/password = '')
command=jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.allow_origin='*' --NotebookApp.base_url=${JUPYTER_BASE_URL:-/}
# *** Using /VisoMaster ***
directory=/VisoMaster  ; Start Jupyter in the VisoMaster directory
autostart=true              ; Start Jupyter automatically
autorestart=true            ; Restart Jupyter if it crashes
priority=20                 ; Start after sshd
# *** Using /logs ***
stdout_logfile=/logs/jupyter.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
# *** Using /logs ***
stderr_logfile=/logs/jupyter_err.log
stderr_logfile_maxbytes=10MB
stderr_logfile_backups=3
user=root                   ; Run Jupyter as root

[program:vnc]
# Runs the original VNC startup script from /dockerstartup/
# This script should handle starting the VNC server and the window manager (IceWM)
# Ensure the script inside /dockerstartup/vnc_startup.sh correctly calls the IceWM startup script (e.g., /etc/icewm/wm_startup.sh)
command=/dockerstartup/vnc_startup.sh --wait
autostart=true              ; Start VNC automatically
autorestart=true            ; Restart VNC service if it crashes
priority=30                 ; Start after Jupyter
# *** Using /logs ***
stdout_logfile=/logs/vnc.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
# *** Using /logs ***
stderr_logfile=/logs/vnc_err.log
stderr_logfile_maxbytes=10MB
stderr_logfile_backups=3
user=root                   ; Run VNC startup as root

[program:model-downloader]
# This is the consolidated model downloading section that runs after all other services
# This will only execute once and will not restart automatically
command=/bin/bash -c 'source /opt/venv/bin/activate && python -c "import torch; from transformers import AutoModel; print(\"Downloading models...\"); AutoModel.from_pretrained(\"dmort/VisoMaster\", trust_remote_code=True); print(\"Models downloaded successfully!\")"'
directory=/VisoMaster       ; Run from the VisoMaster directory
autostart=true              ; Start automatically
autorestart=false           ; Do not restart if it exits
startsecs=0                 ; Consider the process started immediately
startretries=1              ; Only try to start once
priority=100                ; Start after all other services (highest number = last to start)
# *** Using /logs ***
stdout_logfile=/logs/model_downloader.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
# *** Using /logs ***
stderr_logfile=/logs/model_downloader_err.log
stderr_logfile_maxbytes=10MB
stderr_logfile_backups=3
user=root                   ; Run as root
